<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title><![CDATA[Shiyi's blog]]></title>
  <subtitle><![CDATA[More simple, more effective.]]></subtitle>
  <link href="/atom.xml" rel="self"/>
  <link href="http://zhoushiyi.com/"/>
  <updated>2015-09-28T15:44:38.723Z</updated>
  <id>http://zhoushiyi.com/</id>
  
  <author>
    <name><![CDATA[Shiyi]]></name>
    
  </author>
  
  <generator uri="http://hexo.io/">Hexo</generator>
  
  <entry>
    <title><![CDATA[表、栈和队列（一）]]></title>
    <link href="http://zhoushiyi.com/2015/09/28/ADT/"/>
    <id>http://zhoushiyi.com/2015/09/28/ADT/</id>
    <published>2015-09-27T17:37:47.000Z</published>
    <updated>2015-09-28T15:44:38.723Z</updated>
    <content type="html"><![CDATA[<h1 id="表_ADT">表 ADT</h1><p>  一般的形如A1,A2,A3,…,AN的表。表的大小为N。大小为0的表为空表。<br>  对表的所有操作都可以通过使用<strong>数组</strong>来实现。<br>  数组的存储是<strong>连续</strong>的，但是访问是<strong>随机</strong>的，可以用下标对数组进行随机访问，即只需要花费常数时间。然而遍历和Find都将以线性时间执行，而且插入和删除的花费昂贵，插入/删除一个元素都需要将位置后/前所有的元素移动一个位置，因此仍然需要线性时间。<br>  因为插入和删除的运行时间如此慢以及表的大小还必须事先已知，所以简单数组一般不用来实现表这种结构。</p>
<ul>
<li><h1 id="链表">链表</h1></li>
</ul>
<p>  为了避免插入和删除的线性开销，需要允许表可以不连续存储，否则表的部分或者全部需要整体移动。<br>  链表由一系列不必在内存中相连的结构(节点)组成。每一个节点均含有表元素和指向后继元节点的指针。最后一个节点的该指针指向NULL。<br>  <img src="/img/list.png" alt="链表1"></p>
<p>  使用一个根指针(head)来代表链表的起始位置，根指针只是一个指针，它不包含任何数据。<em>注意：这里没有使用头节点(哑节点)</em></p>
<figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//单链表</span></span><br><span class="line"><span class="preprocessor">#ifndef _MYLIST_H_</span></span><br><span class="line"><span class="preprocessor">#<span class="keyword">define</span> _MYLIST_H_</span></span><br><span class="line"></span><br><span class="line"><span class="preprocessor">#<span class="keyword">include</span> &lt;stdio.h&gt;</span></span><br><span class="line"><span class="preprocessor">#<span class="keyword">include</span> &lt;stdlib.h&gt;</span></span><br><span class="line"><span class="preprocessor">#<span class="keyword">include</span> &lt;assert.h&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">struct</span> Node;</span><br><span class="line"><span class="keyword">typedef</span> <span class="keyword">struct</span> Node *PtrToNode;</span><br><span class="line"><span class="keyword">typedef</span> PtrToNode List;</span><br><span class="line"><span class="keyword">typedef</span> PtrToNode Position;</span><br><span class="line"><span class="keyword">typedef</span> <span class="keyword">int</span> ElementType;</span><br><span class="line"></span><br><span class="line"><span class="keyword">struct</span> Node</span><br><span class="line">&#123;</span><br><span class="line">    ElementType element;</span><br><span class="line">    PtrToNode next;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="preprocessor">#<span class="keyword">define</span> FALSE 0</span></span><br><span class="line"><span class="preprocessor">#<span class="keyword">define</span> TRUE  1</span></span><br><span class="line"></span><br><span class="line"><span class="function">List <span class="title">Append</span><span class="params">(List l, ElementType x)</span></span>;    </span><br><span class="line"><span class="function">List <span class="title">Create</span><span class="params">(ElementType *a, <span class="keyword">int</span> size)</span></span>; </span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">Insert</span><span class="params">(PtrToNode *linkp, ElementType x)</span></span>;  </span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">InsertAtP</span><span class="params">(PtrToNode *linkp, Position p, ElementType x)</span></span>;  </span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">Delete</span><span class="params">(PtrToNode *linkp, Position p)</span></span>;  </span><br><span class="line"><span class="function">Position <span class="title">Find</span><span class="params">(List l, ElementType x)</span></span>;  </span><br><span class="line"><span class="function">List <span class="title">Reverse</span><span class="params">(List l)</span></span>;  </span><br><span class="line"><span class="function">List <span class="title">ReverseRecursive</span><span class="params">(List l)</span></span>; </span><br><span class="line"></span><br><span class="line"><span class="preprocessor">#<span class="keyword">endif</span> <span class="comment">//"mylist.h"</span></span></span><br></pre></td></tr></table></figure>
<figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br></pre></td><td class="code"><pre><span class="line"><span class="preprocessor">#<span class="keyword">include</span> "mylist.h"</span></span><br><span class="line"></span><br><span class="line"><span class="comment">//建立链表</span></span><br><span class="line"><span class="function">List <span class="title">Create</span><span class="params">(ElementType *a, <span class="keyword">int</span> size)</span></span><br><span class="line"></span>&#123;</span><br><span class="line">    <span class="keyword">int</span> i;</span><br><span class="line">    List head = NULL;</span><br><span class="line">    <span class="keyword">for</span>(i = <span class="number">0</span>; i &lt; size; i++) &#123;</span><br><span class="line">        head = Append(head, a[i]);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> head;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//尾插法</span></span><br><span class="line"><span class="function">List <span class="title">Append</span><span class="params">(List l, ElementType x)</span></span><br><span class="line"></span>&#123;</span><br><span class="line">    List p = l;</span><br><span class="line">    PtrToNode newNode = NULL;</span><br><span class="line">    newNode = (PtrToNode)<span class="built_in">malloc</span>(<span class="keyword">sizeof</span>(<span class="keyword">struct</span> Node));</span><br><span class="line">    <span class="keyword">if</span> (newNode) &#123;</span><br><span class="line">        newNode-&gt;element = x;</span><br><span class="line">        newNode-&gt;next = NULL;</span><br><span class="line">        <span class="keyword">if</span> (p) &#123;</span><br><span class="line">            <span class="keyword">while</span>(p-&gt;next) &#123;</span><br><span class="line">                p = p-&gt;next;</span><br><span class="line">            &#125;</span><br><span class="line">            p-&gt;next = newNode;</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            l = newNode;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> l;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<a id="more"></a>
<p><img src="/img/list-insert.png" alt="链表1"></p>
<figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//假设链表按从小到大的顺序插入节点</span></span><br><span class="line"><span class="comment">//这里的linkp是指向head的指针(二级指针)</span></span><br><span class="line"><span class="comment">//过程如图2所示，这种方法消除了节点插入到链表起始位置的特殊情况</span></span><br><span class="line"><span class="comment">//消除的关键在于：链表中的每个节点都有一个指向它的指针，对于第一个节点，这个指针就是根指针；</span></span><br><span class="line"><span class="comment">//对于其他节点，这个指针是前一个节点的next指针。</span></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">Insert</span><span class="params">(PtrToNode *linkp, ElementType x)</span></span><br><span class="line"></span>&#123;</span><br><span class="line">    PtrToNode current;</span><br><span class="line">    PtrToNode newNode;</span><br><span class="line">    <span class="keyword">while</span>((current = *linkp) &amp;&amp; current-&gt;element &lt; x) &#123;</span><br><span class="line">        linkp = &amp;current-&gt;next;</span><br><span class="line">    &#125;</span><br><span class="line">    newNode = (PtrToNode)<span class="built_in">malloc</span>(<span class="keyword">sizeof</span>(<span class="keyword">struct</span> Node));</span><br><span class="line">    <span class="keyword">if</span> (!newNode) &#123;</span><br><span class="line">        <span class="keyword">return</span> FALSE;</span><br><span class="line">    &#125;</span><br><span class="line">    newNode-&gt;element = x;</span><br><span class="line">    newNode-&gt;next = current;</span><br><span class="line">    *linkp = newNode;</span><br><span class="line">    <span class="keyword">return</span> TRUE;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//将新节点插入到指定位置之前</span></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">InsertAtP</span><span class="params">(PtrToNode *linkp, Position p, ElementType x)</span></span><br><span class="line"></span>&#123;</span><br><span class="line">    <span class="keyword">int</span> ret = FALSE;</span><br><span class="line">    PtrToNode current = NULL;</span><br><span class="line">    PtrToNode newNode = NULL;</span><br><span class="line">    assert(p);</span><br><span class="line">    <span class="keyword">while</span>((current = *linkp) &amp;&amp; current != p) &#123;</span><br><span class="line">        linkp = &amp;current-&gt;next;</span><br><span class="line">        current = *linkp;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">if</span> (current) &#123;</span><br><span class="line">        newNode = (PtrToNode)<span class="built_in">malloc</span>(<span class="keyword">sizeof</span>(<span class="keyword">struct</span> Node));</span><br><span class="line">        <span class="keyword">if</span> (newNode) &#123;</span><br><span class="line">            newNode-&gt;element = x;</span><br><span class="line">            newNode-&gt;next = current;</span><br><span class="line">            *linkp = newNode;</span><br><span class="line">            ret = TRUE;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> ret;</span><br><span class="line">&#125;</span><br><span class="line">  </span><br><span class="line"><span class="comment">//删除指定位置上的节点</span></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">Delete</span><span class="params">(PtrToNode *linkp, Position p)</span></span><br><span class="line"></span>&#123;</span><br><span class="line">    <span class="keyword">int</span> ret = FALSE;</span><br><span class="line">    PtrToNode current = NULL;</span><br><span class="line">    assert(p);</span><br><span class="line">    <span class="keyword">while</span> ((current = *linkp) &amp;&amp; current != p) &#123;</span><br><span class="line">        linkp = &amp;current-&gt;next;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">if</span> (current) &#123;</span><br><span class="line">        *linkp = current-&gt;next;</span><br><span class="line">        <span class="built_in">free</span>(current);</span><br><span class="line">        current = NULL;</span><br><span class="line">        ret = TRUE;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> ret;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//查找节点的位置</span></span><br><span class="line"><span class="function">Position <span class="title">Find</span><span class="params">(List l, ElementType x)</span></span><br><span class="line"></span>&#123;</span><br><span class="line">    Position p = l;</span><br><span class="line">    <span class="keyword">while</span>(p &amp;&amp; p-&gt;element != x)</span><br><span class="line">        p = p-&gt;next;</span><br><span class="line">    <span class="keyword">return</span> p;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//反转链表</span></span><br><span class="line"><span class="function">List <span class="title">Reverse</span><span class="params">(List head)</span></span><br><span class="line"></span>&#123;</span><br><span class="line">    PtrToNode prev,current,rest;</span><br><span class="line">    <span class="keyword">if</span> (head == NULL || head-&gt;next == NULL)</span><br><span class="line">        <span class="keyword">return</span> NULL;</span><br><span class="line">    prev = head;</span><br><span class="line">    current = head-&gt;next;</span><br><span class="line">    head-&gt;next = NULL;</span><br><span class="line">    <span class="keyword">while</span>(current) &#123;</span><br><span class="line">        rest = current-&gt;next;</span><br><span class="line">        current-&gt;next = prev;</span><br><span class="line">        prev = current;</span><br><span class="line">        current = rest;</span><br><span class="line">    &#125;</span><br><span class="line">    head = prev;</span><br><span class="line">    <span class="keyword">return</span> head;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//反转链表（递归版）</span></span><br><span class="line"><span class="function">List <span class="title">ReverseRecursive</span><span class="params">(List head)</span></span><br><span class="line"></span>&#123;</span><br><span class="line">    PtrToNode node, next;</span><br><span class="line">    <span class="keyword">if</span> (head &amp;&amp; head-&gt;next) &#123;</span><br><span class="line">        node = head;</span><br><span class="line">        next = node-&gt;next;</span><br><span class="line">        head = ReverseRecursive(next);</span><br><span class="line">        next-&gt;next = node;</span><br><span class="line">        node-&gt;next = NULL;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> head;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
]]></content>
    <summary type="html">
    <![CDATA[<h1 id="表_ADT">表 ADT</h1><p>  一般的形如A1,A2,A3,…,AN的表。表的大小为N。大小为0的表为空表。<br>  对表的所有操作都可以通过使用<strong>数组</strong>来实现。<br>  数组的存储是<strong>连续</strong>的，但是访问是<strong>随机</strong>的，可以用下标对数组进行随机访问，即只需要花费常数时间。然而遍历和Find都将以线性时间执行，而且插入和删除的花费昂贵，插入/删除一个元素都需要将位置后/前所有的元素移动一个位置，因此仍然需要线性时间。<br>  因为插入和删除的运行时间如此慢以及表的大小还必须事先已知，所以简单数组一般不用来实现表这种结构。</p>
<ul>
<li><h1 id="链表">链表</h1></li>
</ul>
<p>  为了避免插入和删除的线性开销，需要允许表可以不连续存储，否则表的部分或者全部需要整体移动。<br>  链表由一系列不必在内存中相连的结构(节点)组成。每一个节点均含有表元素和指向后继元节点的指针。最后一个节点的该指针指向NULL。<br>  <img src="/img/list.png" alt="链表1"></p>
<p>  使用一个根指针(head)来代表链表的起始位置，根指针只是一个指针，它不包含任何数据。<em>注意：这里没有使用头节点(哑节点)</em></p>
<figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//单链表</span></span><br><span class="line"><span class="preprocessor">#ifndef _MYLIST_H_</span></span><br><span class="line"><span class="preprocessor">#<span class="keyword">define</span> _MYLIST_H_</span></span><br><span class="line"></span><br><span class="line"><span class="preprocessor">#<span class="keyword">include</span> &lt;stdio.h&gt;</span></span><br><span class="line"><span class="preprocessor">#<span class="keyword">include</span> &lt;stdlib.h&gt;</span></span><br><span class="line"><span class="preprocessor">#<span class="keyword">include</span> &lt;assert.h&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">struct</span> Node;</span><br><span class="line"><span class="keyword">typedef</span> <span class="keyword">struct</span> Node *PtrToNode;</span><br><span class="line"><span class="keyword">typedef</span> PtrToNode List;</span><br><span class="line"><span class="keyword">typedef</span> PtrToNode Position;</span><br><span class="line"><span class="keyword">typedef</span> <span class="keyword">int</span> ElementType;</span><br><span class="line"></span><br><span class="line"><span class="keyword">struct</span> Node</span><br><span class="line">&#123;</span><br><span class="line">    ElementType element;</span><br><span class="line">    PtrToNode next;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="preprocessor">#<span class="keyword">define</span> FALSE 0</span></span><br><span class="line"><span class="preprocessor">#<span class="keyword">define</span> TRUE  1</span></span><br><span class="line"></span><br><span class="line"><span class="function">List <span class="title">Append</span><span class="params">(List l, ElementType x)</span></span>;    </span><br><span class="line"><span class="function">List <span class="title">Create</span><span class="params">(ElementType *a, <span class="keyword">int</span> size)</span></span>; </span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">Insert</span><span class="params">(PtrToNode *linkp, ElementType x)</span></span>;  </span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">InsertAtP</span><span class="params">(PtrToNode *linkp, Position p, ElementType x)</span></span>;  </span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">Delete</span><span class="params">(PtrToNode *linkp, Position p)</span></span>;  </span><br><span class="line"><span class="function">Position <span class="title">Find</span><span class="params">(List l, ElementType x)</span></span>;  </span><br><span class="line"><span class="function">List <span class="title">Reverse</span><span class="params">(List l)</span></span>;  </span><br><span class="line"><span class="function">List <span class="title">ReverseRecursive</span><span class="params">(List l)</span></span>; </span><br><span class="line"></span><br><span class="line"><span class="preprocessor">#<span class="keyword">endif</span> <span class="comment">//"mylist.h"</span></span></span><br></pre></td></tr></table></figure>
<figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br></pre></td><td class="code"><pre><span class="line"><span class="preprocessor">#<span class="keyword">include</span> "mylist.h"</span></span><br><span class="line"></span><br><span class="line"><span class="comment">//建立链表</span></span><br><span class="line"><span class="function">List <span class="title">Create</span><span class="params">(ElementType *a, <span class="keyword">int</span> size)</span></span><br><span class="line"></span>&#123;</span><br><span class="line">    <span class="keyword">int</span> i;</span><br><span class="line">    List head = NULL;</span><br><span class="line">    <span class="keyword">for</span>(i = <span class="number">0</span>; i &lt; size; i++) &#123;</span><br><span class="line">        head = Append(head, a[i]);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> head;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//尾插法</span></span><br><span class="line"><span class="function">List <span class="title">Append</span><span class="params">(List l, ElementType x)</span></span><br><span class="line"></span>&#123;</span><br><span class="line">    List p = l;</span><br><span class="line">    PtrToNode newNode = NULL;</span><br><span class="line">    newNode = (PtrToNode)<span class="built_in">malloc</span>(<span class="keyword">sizeof</span>(<span class="keyword">struct</span> Node));</span><br><span class="line">    <span class="keyword">if</span> (newNode) &#123;</span><br><span class="line">        newNode-&gt;element = x;</span><br><span class="line">        newNode-&gt;next = NULL;</span><br><span class="line">        <span class="keyword">if</span> (p) &#123;</span><br><span class="line">            <span class="keyword">while</span>(p-&gt;next) &#123;</span><br><span class="line">                p = p-&gt;next;</span><br><span class="line">            &#125;</span><br><span class="line">            p-&gt;next = newNode;</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            l = newNode;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> l;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]>
    
    </summary>
    
      <category term="数据结构" scheme="http://zhoushiyi.com/tags/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84/"/>
    
      <category term="算法" scheme="http://zhoushiyi.com/tags/%E7%AE%97%E6%B3%95/"/>
    
  </entry>
  
  <entry>
    <title><![CDATA[字符串操作]]></title>
    <link href="http://zhoushiyi.com/2015/09/06/string-practice/"/>
    <id>http://zhoushiyi.com/2015/09/06/string-practice/</id>
    <published>2015-09-05T17:00:06.000Z</published>
    <updated>2015-09-27T17:13:05.082Z</updated>
    <content type="html"><![CDATA[<h2 id="1-_strcmp">1. strcmp</h2><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">mystrcmp</span> <span class="params">( <span class="keyword">const</span> <span class="keyword">char</span> *src, <span class="keyword">const</span> <span class="keyword">char</span> *dst )</span> </span>&#123;</span><br><span class="line">    assert(src &amp;&amp; dst);</span><br><span class="line">    <span class="keyword">int</span> ret = <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">while</span>( !(ret = *(<span class="keyword">unsigned</span> <span class="keyword">char</span> *)src - *(<span class="keyword">unsigned</span> <span class="keyword">char</span> *)dst) &amp;&amp; *dst ) &#123;</span><br><span class="line">        ++src;</span><br><span class="line">        ++dst;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">if</span> ( ret &lt; <span class="number">0</span> ) </span><br><span class="line">        ret = -<span class="number">1</span>;</span><br><span class="line">    <span class="keyword">else</span> <span class="keyword">if</span> ( ret &gt; <span class="number">0</span> ) </span><br><span class="line">        ret = <span class="number">1</span>;</span><br><span class="line">    <span class="keyword">return</span> ret;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>(未完待续)</p>
]]></content>
    <summary type="html">
    <![CDATA[<h2 id="1-_strcmp">1. strcmp</h2><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="]]>
    </summary>
    
      <category term="练习" scheme="http://zhoushiyi.com/tags/%E7%BB%83%E4%B9%A0/"/>
    
  </entry>
  
</feed>
