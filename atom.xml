<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title><![CDATA[Shiyi's blog]]></title>
  <subtitle><![CDATA[More simple, more effective.]]></subtitle>
  <link href="/atom.xml" rel="self"/>
  <link href="http://zhoushiyi.com/"/>
  <updated>2015-10-04T02:46:58.271Z</updated>
  <id>http://zhoushiyi.com/</id>
  
  <author>
    <name><![CDATA[Shiyi]]></name>
    
  </author>
  
  <generator uri="http://hexo.io/">Hexo</generator>
  
  <entry>
    <title><![CDATA[理解指针]]></title>
    <link href="http://zhoushiyi.com/2015/10/03/Understanding-pointer/"/>
    <id>http://zhoushiyi.com/2015/10/03/Understanding-pointer/</id>
    <published>2015-10-03T02:50:10.000Z</published>
    <updated>2015-10-04T02:46:58.271Z</updated>
    <content type="html"><![CDATA[<p>在讲指针之前，先简单了解一些预备知识。</p>
<ul>
<li><strong>字节</strong>(byte)是<strong>最基本</strong>的存储单位，而<strong>位</strong>(bit)是<strong>最小</strong>的存储单位，1byte = 8bit。那么一个字节可以存储无符号值 0-255 或者有符号值 -128至127。</li>
<li>为了存储更大的值，我们把两个或更多的字节合在一起作为一个更大的存储单位：<strong>字</strong>。<br>一个字包含的位数就叫做<strong>字长</strong>。字长是CPU的主要技术指标之一，指的是CPU一次能并行处理的二进制位数。PC机所谓的16位、32位、64位指的就是字长。很显然，假设指令数目相同的情况下，字长越长，CPU单位时间能处理的数据或指令就越多，速度也就越快。</li>
<li>计算机的内存被组织成一个由<strong>N个连续的字节大小</strong>的单元组成的数组。每个字节都有一个唯一的<strong>地址</strong>。第一个字节的地址为0，接下来的字节地址为1，依此类推。（<em>为简化讨论，这里不引入物理地址和虚拟地址等概念</em>）<br>这是一个线性的<strong>地址空间</strong>：<br>{ 0， 1， 2， ……， N }，N = 2^n。<br>对于32位系统，地址总线的宽度是32位，这个位数决定了地址空间的范围：<strong>[0~2^32)</strong>，所以内存大小最大为<strong>2^32byte = 4G</strong>。</li>
<li>就像一个门牌号对应一个房间一样，要访问一个内存单元就得知道它的地址。对于程序员来说，要记住地址是比较困难的，如果给地址取个名字的话则方便多了。这些名字就是高级语言中所称的<strong>变量</strong>。变量是由高级语言的编译器为我们实现的，变量给了我们一种更方便的方法来访问内存单元，程序员不必明确的知道编译器将变量放在内存中的什么位置，我们通常只关心变量的值（也就是内存单元中所存储的数据）</li>
<li>数据类型，在C语言中数据类型有整型、浮点型、指针和聚合类型（数组和结构体等）。变量用来存储数据，所以变量也同样分为这几种类型，变量的大小由类型决定。</li>
</ul>
<p>下面进入正题：</p>
<blockquote>
<p>指针</p>
</blockquote>
<p>指针是变量。指针变量的值是地址。<br>前面有提到32位系统的地址最大为2^32，所以至少要有4个字节即2^32位的二进制数才能表示的了。所以指针变量的大小为4个字节。（与字长相等）<br>任何一个变量都有地址，通过<strong>操作符&amp;</strong>可以获取到变量的地址。<br>如果指针p的值是<strong>变量a的地址</strong>，我们称 <strong>p指向a</strong>。<br>通过<strong>操作符*</strong>可以<strong>解引用指针</strong>，即得到指针所指向的内存单元的值。<br>因为指针也是变量，所以它也有地址，如果将一个指针的地址保存到另一个指针变量中，那么就产生了一个<strong>二级指针</strong>（指向指针的指针）。<br><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">int</span> a = <span class="number">112</span>;</span><br><span class="line"><span class="keyword">int</span> *pa = &amp;a; <span class="comment">//指针pa的值为变量a的地址，pa指向a</span></span><br><span class="line"><span class="keyword">int</span> **ppa = &amp;pa; <span class="comment">//ppa是一个二级指针，ppa指向pa</span></span><br><span class="line"><span class="keyword">int</span> b = *pa;  <span class="comment">//*pa的值就是a的值112</span></span><br><span class="line"><span class="keyword">int</span> c = **ppa;  <span class="comment">//因为是二级指针，如果要获取a的值，要解引用两次</span></span><br><span class="line"><span class="keyword">int</span> *pa2 = *ppa;  <span class="comment">//*ppa的值为指针变量pa的值，即变量a的地址</span></span><br></pre></td></tr></table></figure></p>
<p>如果指针的类型与它所指向的变量的类型不同，会怎么样呢？例如：<br><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//假设为32位系统，小端存储</span></span><br><span class="line"><span class="keyword">int</span> a= <span class="number">0x00011000</span>;  <span class="comment">//a=2^16+2^12=69632</span></span><br><span class="line"><span class="keyword">int</span> *pa1 = &amp;a;</span><br><span class="line"><span class="keyword">short</span> *pa2 = pa1; </span><br><span class="line"><span class="keyword">int</span> b = *pa2;  <span class="comment">//b=2^12=4096</span></span><br><span class="line"><span class="keyword">void</span> *p = pa2;</span><br><span class="line"><span class="keyword">int</span> c = *p;  <span class="comment">//error!</span></span><br></pre></td></tr></table></figure></p>
<p>可见，解引用得到的结果依赖于指针的类型。也就是说，指针的类型决定了解引用将会从内存中取出多少个连续的字节。我们知道short一般占2个字节，而int占4个字节，所以即使指针pa1和pa2的值都是整型变量a的地址（a占4个字节，这里的地址是4个字节中第1个字节的地址），但是对两者解引用所得到的值却是不同的，因为pa2的类型是short*，对其解引用将只得到变量a前2个字节所表示的数值（4096）。</p>
<p>我们必须明白不管指针本身的类型是什么，指针变量的值始终是一个地址，而地址就是一个整数。那么指针到底要声明成什么类型则完全取决于程序员想怎么使用这个指针。<br>甚至可以将指针声明为void*类型，它可以存储任何变量的地址。但是如果你对一个void*类型的指针解引用，编译器将报错，因为void*代表没有类型，编译器将不知道要从该指针所指向的地址位置取出多少个字节。</p>
<blockquote>
<p>指针的声明</p>
</blockquote>
<p>前面举的例子中，指针的声明都比较简单，很容易看出指针所指向的数据类型。下面看一些更复杂的声明：<br><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">int</span> *f(<span class="keyword">void</span>);  <span class="comment">//f是一个函数，它的返回值类型为int*(指向整型的指针)</span></span><br><span class="line"><span class="keyword">int</span> (*f)(<span class="keyword">void</span>);  <span class="comment">//f是一个函数指针，它指向的函数的返回值为int</span></span><br><span class="line"><span class="keyword">int</span> *(*f)(<span class="keyword">void</span>);  <span class="comment">//f也是函数指针，它指向的函数的返回值为int*</span></span><br><span class="line"><span class="keyword">int</span> *f[];  <span class="comment">//f是一个数组，它的元素类型是int*</span></span><br><span class="line"><span class="keyword">int</span> (*f[])(<span class="keyword">void</span>);  <span class="comment">//f是一个数组，它的元素类型是函数指针，这个函数指针所指向的函数的返回值是int</span></span><br><span class="line"><span class="keyword">int</span> *(*f[])(<span class="keyword">void</span>);  <span class="comment">//f是一个数组，它的元素类型是函数指针，这个函数指针所指向的函数的返回值是int*</span></span><br></pre></td></tr></table></figure></p>
<p>正确识别上面的声明的诀窍在于，找到所有的操作符，然后按正确的次序执行它们，比如第5行的声明中，第1个括号中[]的优先级高于*，所以括号内的表达式*f[]首先进行求值，所以f是一个元素为某种类型的指针的数组。<br>第2个括号()是函数调用操作符，所以f数组的元素的类型是函数指针，函数的返回值是int(整型)。</p>
<a id="more"></a>
<p>那么我们通常在什么情况下会用到指针呢？<br>1、字符数组与字符串<br><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">char</span> sa1[<span class="number">4</span>] = &#123;<span class="string">'a'</span>, <span class="string">'b'</span>, <span class="string">'c'</span>, <span class="string">'\0'</span>&#125;; <span class="comment">//字符数组</span></span><br><span class="line"><span class="keyword">char</span> sa2[<span class="number">4</span>] = <span class="string">"abc"</span>; <span class="comment">//字符数组，指明了数组大小为4</span></span><br><span class="line"><span class="keyword">char</span> s[] = <span class="string">"abc"</span>;   <span class="comment">//字符数组，没有指明数组大小，由编译器自动计算</span></span><br><span class="line"><span class="keyword">char</span> *ps = s;  <span class="comment">//将数组的起始地址赋给ps</span></span><br><span class="line"><span class="keyword">char</span> *pstr = <span class="string">"abc"</span>;  <span class="comment">//字符串</span></span><br></pre></td></tr></table></figure></p>
<p>pstr是指向一个字符串的指针，它所指向的字符串”abc”是一个字面值常量，字面值常量不是变量，因为它没有“名字”，但是它也是数据，数据都会存放在内存中的某处，并且因为是常量所以我们不能修改它。<br>ps是指向一个字符数组的指针，这里的数组s没有声明为常量，所以我们可以通过对指针ps的操作来修改数组s中的数据。</p>
<p>2、函数<br><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//在数组中寻找某个特定整型值的存储位置，并返回一个指向该位置的指针</span></span><br><span class="line"><span class="keyword">int</span> * find_int( <span class="keyword">int</span> key, <span class="keyword">int</span> <span class="built_in">array</span>[], <span class="keyword">int</span> array_len )</span><br><span class="line">&#123;</span><br><span class="line">    <span class="keyword">int</span> i;</span><br><span class="line">    <span class="keyword">for</span>( i = <span class="number">0</span>; i &lt; array_len; i++ ) &#123;</span><br><span class="line">        <span class="keyword">if</span>( <span class="built_in">array</span>[i] == key ) </span><br><span class="line">            <span class="keyword">return</span> &amp;<span class="built_in">array</span>[i];</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> NULL;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p>
<p>这里有几个值得注意的地方：</p>
<ul>
<li><p>C函数的所有参数均以“传值调用”方式进行传递，这意味着函数将获得参数值的一份拷贝。但是，如果被传递的参数是一个数组名，那么实际上会退化为一个指向数组起始地址的指针。所以上面的函数原型等价于：</p>
<figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">int</span> * find_int( <span class="keyword">int</span> key, <span class="keyword">int</span> *<span class="built_in">array</span>, <span class="keyword">int</span> array_len );</span><br></pre></td></tr></table></figure>
</li>
<li><p>正因为传递数组参数会退化为指针，函数内部将无法知道数组到底有多少个元素，所以要显示的传入数组的大小，即上面函数的第三个参数。</p>
</li>
</ul>
<p>3、动态内存分配<br>C函数库提供了两个函数，malloc和free，分别用于执行动态内存分配和释放。例如：<br><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//用动态分配内存制作一个字符串的一份拷贝，strdup</span></span><br><span class="line"><span class="keyword">char</span> *strdup( <span class="keyword">const</span> <span class="keyword">char</span> *str )</span><br><span class="line">&#123;</span><br><span class="line">    <span class="keyword">char</span> *new_str;</span><br><span class="line">    assert(str);</span><br><span class="line">    new_str = <span class="built_in">malloc</span>( <span class="built_in">strlen</span>(str) + <span class="number">1</span>);</span><br><span class="line">    <span class="keyword">if</span> ( new_str )</span><br><span class="line">        <span class="built_in">strcpy</span>( new_str, str );</span><br><span class="line">    <span class="keyword">return</span> new_str;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p>
<p>这里值得注意的地方是：<br>如果只是简单的将指针str的值赋值给另一个指针变量，并没有实现字符串的拷贝，而只是产生了另一个指向同一个字符串的指针而已。即“浅拷贝”。<br>要真正得到一个字符串的副本，必须通过malloc分配一块新的内存空间，然后再将原字符串的内容复制到这块空间中，这时我们才得到两个一模一样的字符串（它们所存放的位置并不相同），即“深拷贝”。</p>
<p>4、指向指针的指针<br>前面已经提到过二级指针，实际上可以很多级，但最常用的是二级。<br>首先要牢记的是，修改指针变量的值，只是修改指针的指向。<br>指针之间的赋值和传递等等操作均不会影响它们所指向的“源”本身，就像一间房子可以配很多把钥匙，不管钥匙怎么变，房子还是原样。<br>而如果要“改变房子”，必须“使用钥匙”（也就是解引用操作）进到房子里面去。<br>那么二级指针的用途显然就是为了能通过它来修改它所指向的一级指针。（这时候一级指针就是所谓的”房子“）<br><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="preprocessor">#<span class="keyword">include</span> &lt;stdio.h&gt;</span></span><br><span class="line"><span class="comment">//交换两个字符串</span></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">swap_string</span><span class="params">( <span class="keyword">const</span> <span class="keyword">char</span> **a, <span class="keyword">const</span> <span class="keyword">char</span> **b )</span></span><br><span class="line"></span>&#123;</span><br><span class="line">    <span class="keyword">const</span> <span class="keyword">char</span> *tmp;</span><br><span class="line">    tmp = *b;</span><br><span class="line">    *b = *a;</span><br><span class="line">    *a = tmp;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span><br><span class="line"></span>&#123;</span><br><span class="line">    <span class="keyword">const</span> <span class="keyword">char</span> *s1 = <span class="string">"abc"</span>;</span><br><span class="line">    <span class="keyword">const</span> <span class="keyword">char</span> *s2 = <span class="string">"123"</span>;</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">"%s , %s\n"</span>, s1, s2);  <span class="comment">//abc , 123</span></span><br><span class="line">    swap_string(&amp;s1, &amp;s2);  </span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">"%s , %s\n"</span>, s1, s2);  <span class="comment">//123 , abc</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p>
<p>字符串是常量，编译器早在程序运行之前就把它们存在内存中的某处，我们不可能改变它们的值和位置。<br>所以，所谓的交换字符串，就是交换s1和s2两个指针的指向。<br>如果交换函数写成：void swap_string( const char *a, const char *b ); 将不能达到交换两个字符串的目的。<br>因为C函数的所有参数均以“传值调用”方式进行传递，这意味着函数将获得参数值的一份拷贝。<br>也就是说函数内部的指针a和b，只是一份拷贝而已，如果是一级指针，就只是多了两个和s1、s2一样指向的指针而已。<br>它们都指向字符串”abc”和”123”。所以在函数内部交换a和b，不会影响到s1和s2的值，也就不能改变s1和s2的指向。<br>（试想你从两把钥匙变成了四把钥匙，函数只是交换那两把新钥匙而已）<br>因此，必须使用二级指针来达到修改s1和s2的目的。</p>
<p>限于篇幅，本文对于指针的介绍并不深入，也不全面，只希望能在一定程度上帮助读者更好的理解指针。</p>
]]></content>
    <summary type="html">
    <![CDATA[<p>在讲指针之前，先简单了解一些预备知识。</p>
<ul>
<li><strong>字节</strong>(byte)是<strong>最基本</strong>的存储单位，而<strong>位</strong>(bit)是<strong>最小</strong>的存储单位，1byte = 8bit。那么一个字节可以存储无符号值 0-255 或者有符号值 -128至127。</li>
<li>为了存储更大的值，我们把两个或更多的字节合在一起作为一个更大的存储单位：<strong>字</strong>。<br>一个字包含的位数就叫做<strong>字长</strong>。字长是CPU的主要技术指标之一，指的是CPU一次能并行处理的二进制位数。PC机所谓的16位、32位、64位指的就是字长。很显然，假设指令数目相同的情况下，字长越长，CPU单位时间能处理的数据或指令就越多，速度也就越快。</li>
<li>计算机的内存被组织成一个由<strong>N个连续的字节大小</strong>的单元组成的数组。每个字节都有一个唯一的<strong>地址</strong>。第一个字节的地址为0，接下来的字节地址为1，依此类推。（<em>为简化讨论，这里不引入物理地址和虚拟地址等概念</em>）<br>这是一个线性的<strong>地址空间</strong>：<br>{ 0， 1， 2， ……， N }，N = 2^n。<br>对于32位系统，地址总线的宽度是32位，这个位数决定了地址空间的范围：<strong>[0~2^32)</strong>，所以内存大小最大为<strong>2^32byte = 4G</strong>。</li>
<li>就像一个门牌号对应一个房间一样，要访问一个内存单元就得知道它的地址。对于程序员来说，要记住地址是比较困难的，如果给地址取个名字的话则方便多了。这些名字就是高级语言中所称的<strong>变量</strong>。变量是由高级语言的编译器为我们实现的，变量给了我们一种更方便的方法来访问内存单元，程序员不必明确的知道编译器将变量放在内存中的什么位置，我们通常只关心变量的值（也就是内存单元中所存储的数据）</li>
<li>数据类型，在C语言中数据类型有整型、浮点型、指针和聚合类型（数组和结构体等）。变量用来存储数据，所以变量也同样分为这几种类型，变量的大小由类型决定。</li>
</ul>
<p>下面进入正题：</p>
<blockquote>
<p>指针</p>
</blockquote>
<p>指针是变量。指针变量的值是地址。<br>前面有提到32位系统的地址最大为2^32，所以至少要有4个字节即2^32位的二进制数才能表示的了。所以指针变量的大小为4个字节。（与字长相等）<br>任何一个变量都有地址，通过<strong>操作符&amp;</strong>可以获取到变量的地址。<br>如果指针p的值是<strong>变量a的地址</strong>，我们称 <strong>p指向a</strong>。<br>通过<strong>操作符*</strong>可以<strong>解引用指针</strong>，即得到指针所指向的内存单元的值。<br>因为指针也是变量，所以它也有地址，如果将一个指针的地址保存到另一个指针变量中，那么就产生了一个<strong>二级指针</strong>（指向指针的指针）。<br><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">int</span> a = <span class="number">112</span>;</span><br><span class="line"><span class="keyword">int</span> *pa = &amp;a; <span class="comment">//指针pa的值为变量a的地址，pa指向a</span></span><br><span class="line"><span class="keyword">int</span> **ppa = &amp;pa; <span class="comment">//ppa是一个二级指针，ppa指向pa</span></span><br><span class="line"><span class="keyword">int</span> b = *pa;  <span class="comment">//*pa的值就是a的值112</span></span><br><span class="line"><span class="keyword">int</span> c = **ppa;  <span class="comment">//因为是二级指针，如果要获取a的值，要解引用两次</span></span><br><span class="line"><span class="keyword">int</span> *pa2 = *ppa;  <span class="comment">//*ppa的值为指针变量pa的值，即变量a的地址</span></span><br></pre></td></tr></table></figure></p>
<p>如果指针的类型与它所指向的变量的类型不同，会怎么样呢？例如：<br><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//假设为32位系统，小端存储</span></span><br><span class="line"><span class="keyword">int</span> a= <span class="number">0x00011000</span>;  <span class="comment">//a=2^16+2^12=69632</span></span><br><span class="line"><span class="keyword">int</span> *pa1 = &amp;a;</span><br><span class="line"><span class="keyword">short</span> *pa2 = pa1; </span><br><span class="line"><span class="keyword">int</span> b = *pa2;  <span class="comment">//b=2^12=4096</span></span><br><span class="line"><span class="keyword">void</span> *p = pa2;</span><br><span class="line"><span class="keyword">int</span> c = *p;  <span class="comment">//error!</span></span><br></pre></td></tr></table></figure></p>
<p>可见，解引用得到的结果依赖于指针的类型。也就是说，指针的类型决定了解引用将会从内存中取出多少个连续的字节。我们知道short一般占2个字节，而int占4个字节，所以即使指针pa1和pa2的值都是整型变量a的地址（a占4个字节，这里的地址是4个字节中第1个字节的地址），但是对两者解引用所得到的值却是不同的，因为pa2的类型是short*，对其解引用将只得到变量a前2个字节所表示的数值（4096）。</p>
<p>我们必须明白不管指针本身的类型是什么，指针变量的值始终是一个地址，而地址就是一个整数。那么指针到底要声明成什么类型则完全取决于程序员想怎么使用这个指针。<br>甚至可以将指针声明为void*类型，它可以存储任何变量的地址。但是如果你对一个void*类型的指针解引用，编译器将报错，因为void*代表没有类型，编译器将不知道要从该指针所指向的地址位置取出多少个字节。</p>
<blockquote>
<p>指针的声明</p>
</blockquote>
<p>前面举的例子中，指针的声明都比较简单，很容易看出指针所指向的数据类型。下面看一些更复杂的声明：<br><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">int</span> *f(<span class="keyword">void</span>);  <span class="comment">//f是一个函数，它的返回值类型为int*(指向整型的指针)</span></span><br><span class="line"><span class="keyword">int</span> (*f)(<span class="keyword">void</span>);  <span class="comment">//f是一个函数指针，它指向的函数的返回值为int</span></span><br><span class="line"><span class="keyword">int</span> *(*f)(<span class="keyword">void</span>);  <span class="comment">//f也是函数指针，它指向的函数的返回值为int*</span></span><br><span class="line"><span class="keyword">int</span> *f[];  <span class="comment">//f是一个数组，它的元素类型是int*</span></span><br><span class="line"><span class="keyword">int</span> (*f[])(<span class="keyword">void</span>);  <span class="comment">//f是一个数组，它的元素类型是函数指针，这个函数指针所指向的函数的返回值是int</span></span><br><span class="line"><span class="keyword">int</span> *(*f[])(<span class="keyword">void</span>);  <span class="comment">//f是一个数组，它的元素类型是函数指针，这个函数指针所指向的函数的返回值是int*</span></span><br></pre></td></tr></table></figure></p>
<p>正确识别上面的声明的诀窍在于，找到所有的操作符，然后按正确的次序执行它们，比如第5行的声明中，第1个括号中[]的优先级高于*，所以括号内的表达式*f[]首先进行求值，所以f是一个元素为某种类型的指针的数组。<br>第2个括号()是函数调用操作符，所以f数组的元素的类型是函数指针，函数的返回值是int(整型)。</p>]]>
    
    </summary>
    
      <category term="C/C++" scheme="http://zhoushiyi.com/tags/C-C/"/>
    
  </entry>
  
  <entry>
    <title><![CDATA[表、栈和队列（一）]]></title>
    <link href="http://zhoushiyi.com/2015/09/28/ADT/"/>
    <id>http://zhoushiyi.com/2015/09/28/ADT/</id>
    <published>2015-09-27T17:37:47.000Z</published>
    <updated>2015-10-04T01:53:49.557Z</updated>
    <content type="html"><![CDATA[<h1 id="表_ADT">表 ADT</h1><p>  一般的形如A1,A2,A3,…,AN的表。表的大小为N。大小为0的表为空表。<br>  对表的所有操作都可以通过使用<strong>数组</strong>来实现。<br>  数组的存储是<strong>连续</strong>的，可以用下标对数组进行随机访问，只需要花费常数时间。然而遍历和Find都将以线性时间执行，而且插入和删除的花费昂贵，插入/删除一个元素都需要将位置后/前所有的元素移动一个位置，因此仍然需要线性时间。<br>  因为插入和删除的运行时间如此慢以及表的大小还必须事先已知，所以简单数组一般不用来实现表这种结构。</p>
<ul>
<li><h1 id="链表">链表</h1></li>
</ul>
<p>  为了避免插入和删除的线性开销，需要允许表可以不连续存储，否则表的部分或者全部需要整体移动。<br>  链表由一系列不必在内存中相连的结构(节点)组成。每一个节点均含有表元素和指向后继元节点的指针。最后一个节点的该指针指向NULL。<br>  <img src="/img/list.png" alt="链表1"></p>
<p>  使用一个根指针(head)来代表链表的起始位置，根指针只是一个指针，它不包含任何数据。<em>注意：这里没有使用头节点(哑节点)</em></p>
<figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//单链表</span></span><br><span class="line"><span class="preprocessor">#ifndef _MYLIST_H_</span></span><br><span class="line"><span class="preprocessor">#<span class="keyword">define</span> _MYLIST_H_</span></span><br><span class="line"></span><br><span class="line"><span class="preprocessor">#<span class="keyword">include</span> &lt;stdio.h&gt;</span></span><br><span class="line"><span class="preprocessor">#<span class="keyword">include</span> &lt;stdlib.h&gt;</span></span><br><span class="line"><span class="preprocessor">#<span class="keyword">include</span> &lt;assert.h&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">struct</span> Node;</span><br><span class="line"><span class="keyword">typedef</span> <span class="keyword">struct</span> Node *PtrToNode;</span><br><span class="line"><span class="keyword">typedef</span> PtrToNode List;</span><br><span class="line"><span class="keyword">typedef</span> PtrToNode Position;</span><br><span class="line"><span class="keyword">typedef</span> <span class="keyword">int</span> ElementType;</span><br><span class="line"></span><br><span class="line"><span class="keyword">struct</span> Node</span><br><span class="line">&#123;</span><br><span class="line">    ElementType element;</span><br><span class="line">    PtrToNode next;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="preprocessor">#<span class="keyword">define</span> FALSE 0</span></span><br><span class="line"><span class="preprocessor">#<span class="keyword">define</span> TRUE  1</span></span><br><span class="line"></span><br><span class="line"><span class="function">List <span class="title">Append</span><span class="params">(List l, ElementType x)</span></span>;    </span><br><span class="line"><span class="function">List <span class="title">Create</span><span class="params">(ElementType *a, <span class="keyword">int</span> size)</span></span>; </span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">Insert</span><span class="params">(PtrToNode *linkp, ElementType x)</span></span>;  </span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">InsertAtP</span><span class="params">(PtrToNode *linkp, Position p, ElementType x)</span></span>;  </span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">Delete</span><span class="params">(PtrToNode *linkp, Position p)</span></span>;  </span><br><span class="line"><span class="function">Position <span class="title">Find</span><span class="params">(List l, ElementType x)</span></span>;  </span><br><span class="line"><span class="function">List <span class="title">Reverse</span><span class="params">(List l)</span></span>;  </span><br><span class="line"><span class="function">List <span class="title">ReverseRecursive</span><span class="params">(List l)</span></span>; </span><br><span class="line"></span><br><span class="line"><span class="preprocessor">#<span class="keyword">endif</span> <span class="comment">//"mylist.h"</span></span></span><br></pre></td></tr></table></figure>
<figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br></pre></td><td class="code"><pre><span class="line"><span class="preprocessor">#<span class="keyword">include</span> "mylist.h"</span></span><br><span class="line"></span><br><span class="line"><span class="comment">//建立链表</span></span><br><span class="line"><span class="function">List <span class="title">Create</span><span class="params">(ElementType *a, <span class="keyword">int</span> size)</span></span><br><span class="line"></span>&#123;</span><br><span class="line">    <span class="keyword">int</span> i;</span><br><span class="line">    List head = NULL;</span><br><span class="line">    <span class="keyword">for</span>(i = <span class="number">0</span>; i &lt; size; i++) &#123;</span><br><span class="line">        head = Append(head, a[i]);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> head;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//尾插法</span></span><br><span class="line"><span class="function">List <span class="title">Append</span><span class="params">(List l, ElementType x)</span></span><br><span class="line"></span>&#123;</span><br><span class="line">    List p = l;</span><br><span class="line">    PtrToNode newNode = NULL;</span><br><span class="line">    newNode = (PtrToNode)<span class="built_in">malloc</span>(<span class="keyword">sizeof</span>(<span class="keyword">struct</span> Node));</span><br><span class="line">    <span class="keyword">if</span> (newNode) &#123;</span><br><span class="line">        newNode-&gt;element = x;</span><br><span class="line">        newNode-&gt;next = NULL;</span><br><span class="line">        <span class="keyword">if</span> (p) &#123;</span><br><span class="line">            <span class="keyword">while</span>(p-&gt;next) &#123;</span><br><span class="line">                p = p-&gt;next;</span><br><span class="line">            &#125;</span><br><span class="line">            p-&gt;next = newNode;</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            l = newNode;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> l;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<a id="more"></a>
<p><img src="/img/list-insert.png" alt="链表1"></p>
<figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//假设链表按从小到大的顺序插入节点</span></span><br><span class="line"><span class="comment">//这里的linkp是指向head的指针(二级指针)</span></span><br><span class="line"><span class="comment">//过程如图2所示，这种方法消除了节点插入到链表起始位置的特殊情况</span></span><br><span class="line"><span class="comment">//消除的关键在于：链表中的每个节点都有一个指向它的指针，对于第一个节点，这个指针就是根指针；</span></span><br><span class="line"><span class="comment">//而对于其他节点，这个指针是前一个节点的next指针。</span></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">Insert</span><span class="params">(PtrToNode *linkp, ElementType x)</span></span><br><span class="line"></span>&#123;</span><br><span class="line">    PtrToNode current;</span><br><span class="line">    PtrToNode newNode;</span><br><span class="line">    <span class="keyword">while</span>((current = *linkp) &amp;&amp; current-&gt;element &lt; x) &#123;</span><br><span class="line">        linkp = &amp;current-&gt;next;</span><br><span class="line">    &#125;</span><br><span class="line">    newNode = (PtrToNode)<span class="built_in">malloc</span>(<span class="keyword">sizeof</span>(<span class="keyword">struct</span> Node));</span><br><span class="line">    <span class="keyword">if</span> (!newNode) &#123;</span><br><span class="line">        <span class="keyword">return</span> FALSE;</span><br><span class="line">    &#125;</span><br><span class="line">    newNode-&gt;element = x;</span><br><span class="line">    newNode-&gt;next = current;</span><br><span class="line">    *linkp = newNode;</span><br><span class="line">    <span class="keyword">return</span> TRUE;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//将新节点插入到指定位置之前</span></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">InsertAtP</span><span class="params">(PtrToNode *linkp, Position p, ElementType x)</span></span><br><span class="line"></span>&#123;</span><br><span class="line">    <span class="keyword">int</span> ret = FALSE;</span><br><span class="line">    PtrToNode current = NULL;</span><br><span class="line">    PtrToNode newNode = NULL;</span><br><span class="line">    assert(p);</span><br><span class="line">    <span class="keyword">while</span>((current = *linkp) &amp;&amp; current != p) &#123;</span><br><span class="line">        linkp = &amp;current-&gt;next;</span><br><span class="line">        current = *linkp;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">if</span> (current) &#123;</span><br><span class="line">        newNode = (PtrToNode)<span class="built_in">malloc</span>(<span class="keyword">sizeof</span>(<span class="keyword">struct</span> Node));</span><br><span class="line">        <span class="keyword">if</span> (newNode) &#123;</span><br><span class="line">            newNode-&gt;element = x;</span><br><span class="line">            newNode-&gt;next = current;</span><br><span class="line">            *linkp = newNode;</span><br><span class="line">            ret = TRUE;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> ret;</span><br><span class="line">&#125;</span><br><span class="line">  </span><br><span class="line"><span class="comment">//删除指定位置上的节点</span></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">Delete</span><span class="params">(PtrToNode *linkp, Position p)</span></span><br><span class="line"></span>&#123;</span><br><span class="line">    <span class="keyword">int</span> ret = FALSE;</span><br><span class="line">    PtrToNode current = NULL;</span><br><span class="line">    assert(p);</span><br><span class="line">    <span class="keyword">while</span> ((current = *linkp) &amp;&amp; current != p) &#123;</span><br><span class="line">        linkp = &amp;current-&gt;next;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">if</span> (current) &#123;</span><br><span class="line">        *linkp = current-&gt;next;</span><br><span class="line">        <span class="built_in">free</span>(current);</span><br><span class="line">        current = NULL;</span><br><span class="line">        ret = TRUE;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> ret;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//查找节点的位置</span></span><br><span class="line"><span class="function">Position <span class="title">Find</span><span class="params">(List l, ElementType x)</span></span><br><span class="line"></span>&#123;</span><br><span class="line">    Position p = l;</span><br><span class="line">    <span class="keyword">while</span>(p &amp;&amp; p-&gt;element != x)</span><br><span class="line">        p = p-&gt;next;</span><br><span class="line">    <span class="keyword">return</span> p;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//反转链表</span></span><br><span class="line"><span class="function">List <span class="title">Reverse</span><span class="params">(List head)</span></span><br><span class="line"></span>&#123;</span><br><span class="line">    PtrToNode prev,current,rest;</span><br><span class="line">    <span class="keyword">if</span> (head == NULL || head-&gt;next == NULL)</span><br><span class="line">        <span class="keyword">return</span> NULL;</span><br><span class="line">    prev = head;</span><br><span class="line">    current = head-&gt;next;</span><br><span class="line">    head-&gt;next = NULL;</span><br><span class="line">    <span class="keyword">while</span>(current) &#123;</span><br><span class="line">        rest = current-&gt;next;</span><br><span class="line">        current-&gt;next = prev;</span><br><span class="line">        prev = current;</span><br><span class="line">        current = rest;</span><br><span class="line">    &#125;</span><br><span class="line">    head = prev;</span><br><span class="line">    <span class="keyword">return</span> head;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//反转链表（递归版）</span></span><br><span class="line"><span class="function">List <span class="title">ReverseRecursive</span><span class="params">(List head)</span></span><br><span class="line"></span>&#123;</span><br><span class="line">    PtrToNode node, next;</span><br><span class="line">    <span class="keyword">if</span> (head &amp;&amp; head-&gt;next) &#123;</span><br><span class="line">        node = head;</span><br><span class="line">        next = node-&gt;next;</span><br><span class="line">        head = ReverseRecursive(next);</span><br><span class="line">        next-&gt;next = node;</span><br><span class="line">        node-&gt;next = NULL;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> head;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
]]></content>
    <summary type="html">
    <![CDATA[<h1 id="表_ADT">表 ADT</h1><p>  一般的形如A1,A2,A3,…,AN的表。表的大小为N。大小为0的表为空表。<br>  对表的所有操作都可以通过使用<strong>数组</strong>来实现。<br>  数组的存储是<strong>连续</strong>的，可以用下标对数组进行随机访问，只需要花费常数时间。然而遍历和Find都将以线性时间执行，而且插入和删除的花费昂贵，插入/删除一个元素都需要将位置后/前所有的元素移动一个位置，因此仍然需要线性时间。<br>  因为插入和删除的运行时间如此慢以及表的大小还必须事先已知，所以简单数组一般不用来实现表这种结构。</p>
<ul>
<li><h1 id="链表">链表</h1></li>
</ul>
<p>  为了避免插入和删除的线性开销，需要允许表可以不连续存储，否则表的部分或者全部需要整体移动。<br>  链表由一系列不必在内存中相连的结构(节点)组成。每一个节点均含有表元素和指向后继元节点的指针。最后一个节点的该指针指向NULL。<br>  <img src="/img/list.png" alt="链表1"></p>
<p>  使用一个根指针(head)来代表链表的起始位置，根指针只是一个指针，它不包含任何数据。<em>注意：这里没有使用头节点(哑节点)</em></p>
<figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//单链表</span></span><br><span class="line"><span class="preprocessor">#ifndef _MYLIST_H_</span></span><br><span class="line"><span class="preprocessor">#<span class="keyword">define</span> _MYLIST_H_</span></span><br><span class="line"></span><br><span class="line"><span class="preprocessor">#<span class="keyword">include</span> &lt;stdio.h&gt;</span></span><br><span class="line"><span class="preprocessor">#<span class="keyword">include</span> &lt;stdlib.h&gt;</span></span><br><span class="line"><span class="preprocessor">#<span class="keyword">include</span> &lt;assert.h&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">struct</span> Node;</span><br><span class="line"><span class="keyword">typedef</span> <span class="keyword">struct</span> Node *PtrToNode;</span><br><span class="line"><span class="keyword">typedef</span> PtrToNode List;</span><br><span class="line"><span class="keyword">typedef</span> PtrToNode Position;</span><br><span class="line"><span class="keyword">typedef</span> <span class="keyword">int</span> ElementType;</span><br><span class="line"></span><br><span class="line"><span class="keyword">struct</span> Node</span><br><span class="line">&#123;</span><br><span class="line">    ElementType element;</span><br><span class="line">    PtrToNode next;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="preprocessor">#<span class="keyword">define</span> FALSE 0</span></span><br><span class="line"><span class="preprocessor">#<span class="keyword">define</span> TRUE  1</span></span><br><span class="line"></span><br><span class="line"><span class="function">List <span class="title">Append</span><span class="params">(List l, ElementType x)</span></span>;    </span><br><span class="line"><span class="function">List <span class="title">Create</span><span class="params">(ElementType *a, <span class="keyword">int</span> size)</span></span>; </span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">Insert</span><span class="params">(PtrToNode *linkp, ElementType x)</span></span>;  </span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">InsertAtP</span><span class="params">(PtrToNode *linkp, Position p, ElementType x)</span></span>;  </span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">Delete</span><span class="params">(PtrToNode *linkp, Position p)</span></span>;  </span><br><span class="line"><span class="function">Position <span class="title">Find</span><span class="params">(List l, ElementType x)</span></span>;  </span><br><span class="line"><span class="function">List <span class="title">Reverse</span><span class="params">(List l)</span></span>;  </span><br><span class="line"><span class="function">List <span class="title">ReverseRecursive</span><span class="params">(List l)</span></span>; </span><br><span class="line"></span><br><span class="line"><span class="preprocessor">#<span class="keyword">endif</span> <span class="comment">//"mylist.h"</span></span></span><br></pre></td></tr></table></figure>
<figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br></pre></td><td class="code"><pre><span class="line"><span class="preprocessor">#<span class="keyword">include</span> "mylist.h"</span></span><br><span class="line"></span><br><span class="line"><span class="comment">//建立链表</span></span><br><span class="line"><span class="function">List <span class="title">Create</span><span class="params">(ElementType *a, <span class="keyword">int</span> size)</span></span><br><span class="line"></span>&#123;</span><br><span class="line">    <span class="keyword">int</span> i;</span><br><span class="line">    List head = NULL;</span><br><span class="line">    <span class="keyword">for</span>(i = <span class="number">0</span>; i &lt; size; i++) &#123;</span><br><span class="line">        head = Append(head, a[i]);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> head;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//尾插法</span></span><br><span class="line"><span class="function">List <span class="title">Append</span><span class="params">(List l, ElementType x)</span></span><br><span class="line"></span>&#123;</span><br><span class="line">    List p = l;</span><br><span class="line">    PtrToNode newNode = NULL;</span><br><span class="line">    newNode = (PtrToNode)<span class="built_in">malloc</span>(<span class="keyword">sizeof</span>(<span class="keyword">struct</span> Node));</span><br><span class="line">    <span class="keyword">if</span> (newNode) &#123;</span><br><span class="line">        newNode-&gt;element = x;</span><br><span class="line">        newNode-&gt;next = NULL;</span><br><span class="line">        <span class="keyword">if</span> (p) &#123;</span><br><span class="line">            <span class="keyword">while</span>(p-&gt;next) &#123;</span><br><span class="line">                p = p-&gt;next;</span><br><span class="line">            &#125;</span><br><span class="line">            p-&gt;next = newNode;</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            l = newNode;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> l;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]>
    
    </summary>
    
      <category term="数据结构" scheme="http://zhoushiyi.com/tags/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84/"/>
    
      <category term="算法" scheme="http://zhoushiyi.com/tags/%E7%AE%97%E6%B3%95/"/>
    
  </entry>
  
</feed>
